AC_INIT(Xnee,3.19,bug-xnee@gnu.org)
AC_CONFIG_AUX_DIR(./autotools/)
AM_INIT_AUTOMAKE
#AB_INIT


AC_PROG_INSTALL
AC_PROG_CC
AC_LANG_C
AC_PROG_MAKE_SET
#AC_PROG_RANLIB
AC_PATH_X
AC_PATH_XTRA
AC_FUNC_VPRINTF
AC_CHECK_HEADERS(stdarg.h varargs.h, break)
AC_EXEEXT
AC_PATH_PROG(AWK,awk)
AC_PATH_PROG(BASH,bash,sh)
AC_PATH_PROG(PKGCFG,pkg-config,,)
AC_PATH_PROG(CONVERT,convert,,)
AC_PATH_PROG(MAKEINFO,makeinfo,,)
AC_PATH_PROG(GTKCONF,gtk-config)

#AC_DISABLE_SHARED
AC_PROG_LIBTOOL

# Add X libs 
LIBS="$LIBS $X_LIBS"


AC_CHECK_LIB(c, dlopen, LIBDL="", [AC_CHECK_LIB(dl, dlopen, LIBDL="-ldl")])
AC_CHECK_LIB(c, sem_init, LIBSEMA="CCC", [AC_CHECK_LIB(pthread, sem_init, LIBSEMA="-lpthread")])
AC_CHECK_LIB(Xtst, XTestFakeMotionEvent, LIBXTST="-lXtst",[AC_CHECK_LIB(Xext,XTestFakeMotionEvent , LIBXTST="-lXext")])

GENERATION_DIRS=""

if test "x$LIBXTST" = "x" ; 
then
    echo ""
    echo " **** ERROR **** "
    echo ""
    echo "Could not locate the needed X11 extensions:"
    echo ""
    echo "   RECORD"
    echo "   XTest"
    echo ""
    echo "Make sure you have them installed before building Xnee"
    echo ""
    echo "  ... on Debian based distros do: apt-get install libxtst-dev"
    echo " "
    exit 1
fi


AC_ARG_ENABLE(gui,
    [  --enable-gui       build the GUI frontend to Xnee],
    [case "${enableval}" in
	yes) buildgui=true ;;
	no)  buildgui=false ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --disable-gui) ;;
	    esac],[buildgui=true])

AC_ARG_ENABLE(gnome-applet,
    [  --enable-gnome-applet   build the Gnome Panel frontend to Xnee (obsoleted)],
    [case "${enableval}" in
	yes) buildgapplet=true ;;
	no)  buildgapplet=false ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --disable-gnome-applet) ;;
	    esac],[buildgapplet=false])

AC_ARG_ENABLE(doc,
    [  --enable-doc       (re)build Xnee documentation],
    [case "${enableval}" in
	yes) builddoc=true ;;
	no)  builddoc=false ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --disable-doc) ;;
	    esac],[builddoc=false])

AC_ARG_ENABLE(man,
    [  --enable-man       (re)build Xnee man pages],
    [case "${enableval}" in
	yes) buildman=true ;;
	no)  buildman=false ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --disable-man) ;;
	    esac],[buildman=false])

AC_ARG_ENABLE(doconly,
    [  --enable-doconly       build Xnee documentation only],
    [case "${enableval}" in
	yes) doconly=true ;;
	no)  doconly=false ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --disable-doconly) ;;
	    esac],[doconly=false])

AC_ARG_ENABLE(xinput2,
    [  --enable-xinput2       build Xnee with support for XInput2],
    [case "${enableval}" in
	yes) use_xi2=true ;;
	no)  use_xi2=false ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --disable-xinput2) ;;
	    esac],[use_xi2=true])

AC_ARG_ENABLE(cli,
    [  --enable-cli       build Xnee command line tool],
    [case "${enableval}" in
	yes) buildcli=true ;;
	no)  buildcli=false ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --disable-cli) ;;
	    esac],[buildcli=true])

AC_ARG_ENABLE(lib,
    [  --enable-lib       install Xnee library (libxnee)],
    [case "${enableval}" in
	yes) buildlib=true ;;
	no)  buildlib=false ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --disable-lib) ;;
	    esac],[buildlib=false])

AC_ARG_ENABLE(static-programs,
    [  --enable-static-programs     make the Xnee programs static (defaults to static)],
    [case "${enableval}" in
	yes) makestatic=true ;;
	no)  makestatic=false ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --disable-static-programs) ;;
	    esac],[makestatic=true])


AC_ARG_ENABLE(xosd,
    [  --enable-xosd       build Xnee with XOSD support],
    [case "${enableval}" in
	yes) xosd=true ;;
	no)  xosd=false ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --disable-xosd) ;;
	    esac],[xosd=true])

AC_ARG_ENABLE(verbose,
    [  --enable-verbose       build Xnee with no verbose mode support],
    [case "${enableval}" in
	yes) verbose=true ;;
	no)  verbose=false ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --disable-verbose) ;;
	    esac],[verbose=true])

AC_ARG_ENABLE(buffer_verbose,
    [  --enable-buffer_verbose  build xnee without support for buffer printouts],
    [case "${enableval}" in
	yes) buffer_verbose=true ;;
	no)  buffer_verbose=false ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --disable-buffer_verbose) ;;
	    esac],[buffer_verbose=false])

AC_ARG_ENABLE(gcov,
    [  --enable-gcov           build xnee with support for gcov],
    [case "${enableval}" in
	yes) gcov=true ;;
	no)  gcov=false ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --enable-gcov) ;;
	    esac],[gcov=false])

AC_ARG_ENABLE(gprof,
    [  --enable-gprof          build xnee with support for gprof],
    [case "${enableval}" in
	yes) gprof=true ;;
	no)  gprof=false ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --enable-gprof) ;;
	    esac],[gprof=false])

AC_ARG_ENABLE(pedantic,
    [  --enable-pedantic          build xnee with support for pedantic compiling],
    [case "${enableval}" in
	yes) pedantic=true ;;
	no)  pedantic=false ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --enable-pedantic) ;;
	    esac],[pedantic=false])

AC_ARG_ENABLE(paranoid-pedantic,
    [  --enable-paranoid-pedantic          build xnee with support for paranoid pedantic compiling],
    [case "${enableval}" in
	yes) para_pedantic=true ;;
	no)  para_pedantic=false ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --enable-paranoid-pedantic) ;;
	    esac],[para_pedantic=false])


AM_CONDITIONAL(BUILDGUI, test x$buildgui = xtrue)
AM_CONDITIONAL(BUILDPNEE, test x$buildgapplet = xtrue)
AM_CONDITIONAL(BUILDDOC, test x$builddoc = xtrue)
AM_CONDITIONAL(BUILDMAN, test x$buildman = xtrue)
AM_CONDITIONAL(VERBOSE, test x$verbose = xtrue)
AM_CONDITIONAL(GCOV, test x$gcov = xtrue)
AM_CONDITIONAL(GPROF, test x$gprof = xtrue)
AM_CONDITIONAL(PEDANTIC,    test x$pedantic = xtrue)
AM_CONDITIONAL(BUF_VERBOSE, test x$buffer_verbose = xtrue)
AM_CONDITIONAL(XOSD, test x$xosd = xtrue)
AM_CONDITIONAL(DOCONLY, test x$doconly = xtrue)
AM_CONDITIONAL(BUILD_STATIC, test x$makestatic = xtrue)
AM_CONDITIONAL(NOT_INSTALL_LIBS, test x$buildlib = xfalse)
AM_CONDITIONAL(XNEE_XINPUT_SUPPORT, test x$use_xi2 = xtrue)

if test x$verbose = xtrue ;
then
    VERBOSE_FLAG=-DUSE_VERBOSE
else
    VERBOSE_FLAG=-DNO_VERBOSE
fi

if test x$gcov = xtrue ;
then
    GCOV_FLAG=-fprofile-arcs -ftest-coverage 
    CFLAGS=
else
    GCOV_FLAG=
fi

if test x$gprof = xtrue ;
then
    GPROF_FLAG=-pg
    CFLAGS=
else
    GPROF_FLAG=
fi

if test x$buffer_verbose = xtrue ;
then
    BUF_VERBOSE_FLAG=-DUSE_BUF_VERBOSE
else
    BUF_VERBOSE_FLAG=-DNO_BUF_VERBOSE
fi

if test x$pedantic = xtrue ;
then
    PEDANTIC_FLAGS= -W -Wall -pedantic -pedantic-errors  -Werror
else
    PEDANTIC_FLAGS=
fi

if test x$para_pedantic = xtrue ;
then
    PEDANTIC_FLAGS=
else
    PEDANTIC_FLAGS=
fi


AM_CONDITIONAL(XNEE_XINPUT_SUPPORT, test x$use_xi2 = xtrue)
if test x$use_xi2 = xtrue;
then
    AC_CHECK_LIB(Xtst, XIQueryPointer, LIBXI="",[AC_CHECK_LIB(Xi, XIQueryPointer, LIBXI="-lXi")])
    AC_CHECK_HEADERS(X11/extensions/XInput2.h, HAS_XI2="true",HAS_XI2="false",)
    XNEE_XINPUT_SUPPORT_FLAGS=-DXNEE_XINPUT_SUPPORT
else
    XNEE_XINPUT_SUPPORT_FLAGS= 
fi



dnl Forward some variables to the makefiles
AC_SUBST(LIBDL)
AC_SUBST(LIBSEMA)
X11_LIBS="-lX11 $LIBXTST $LIBXI"
AC_SUBST(X11_LIBS)


AM_MAINTAINER_MODE
AM_CONFIG_HEADER(config.h)

CLI_DIR=
LIB_DIR=
DOC_DIR=
GUI_DIR=


check_program()
{
    PROG_VAR_TO_CHECK=$1
    PROG_TO_CHECK=$2
    
    if test "x$PROG_VAR_TO_CHECK" = "x" 
    then
	MISSING_PROGRAMS="$MISSING_PROGRAMS $PROG_TO_CHECK"
    fi
}

DEBS_TO_INSTALL=""
check_doc_program()
{
    PROG_VAR_TO_CHECK=$1
    PROG_TO_CHECK=$2
    DEBS=$3    

    if test "x$PROG_VAR_TO_CHECK" = "x" 
    then
	DOC_NOT_BUILT_WARNING=true
	MISSING_PROGRAMS="$MISSING_PROGRAMS $PROG_TO_CHECK"
	DEBS_TO_INSTALL="$DEBS_TO_INSTALL $DEBS"
    fi
}

give_deb_hint()
{
    if test "x$DEBS_TO_INSTALL" != "x" 
    then
	echo "  **       If you are using a Debian based distro "
	echo "  **       (e.g Trisquel, Debian, Gnewsense, Ubuntu), try:"
	echo "               apt-get install $DEBS_TO_INSTALL"
	echo "  **"
    fi
}



help_on_missing_progrs()
{
    PROG=$1
    DISABLE_OPT=$2
    echo "  ** Suggested solutions:" 
    echo "  **    1) Build Xnee without $PROG,"
    echo "  **      ./configure $DISABLE_OPT"
    echo "  **"
    echo "  **    2) Install the missing programs/packages"
    give_deb_hint
    echo "  **    3) If the programs/packages are installed (and not found) make sure they can be found in the PATH or other environment variable"    
    echo "  **"
}

if test x$buildgapplet = xtrue || test x$buildgui = xtrue  || test x$builddoc = xtrue  ; 
then
    check_doc_program "$CONVERT" "convert" "imagemagick"
fi



if test x$buildgapplet = xtrue || test x$buildgui = xtrue  ; 
then
    AC_PATH_PROG(PKGCFG,pkg-config,,)
    check_doc_program "$PKGCFG" "pkg-config" "pkg-config"

    if test "x$PKGCFG" = "x" 
    then

	echo "  ********** ERROR **********"
	echo "  ** pnee and/or gnee can't be built ** "
	echo "  **   ..it is obsoleted and not cuurently supported" 
	echo "  ** " 
	echo "  ** The following program/package is missing:"
	echo "  **    pkg-config"
	echo "  ** " 
	DEBS_TO_INSTALL="pkg-config"
	help_on_missing_progrs "pnee and gnee" "--disable-gnome-applet --disable-gui "
	echo "  ** " 
	echo "  ********** ERROR **********"
	exit 1
    fi
fi

PIXMAP_DIR=pixmap

if test x$buildgapplet = xtrue || test x$buildgui = xtrue  ; 
then
	
    AC_ISC_POSIX
    AC_PROG_CC
    AM_PROG_CC_STDC
    AC_HEADER_STDC
    AC_PATH_XTRA
    GTK_ERR=0
    GTK_MODULES=""
    GTK2_MODULE="gtk+-2.0 "
    GTK2_VERSION="2.0.0"

    gtk_CFLAGS=`$PKGCFG --cflags $GTK2_MODULE `
    gtk_LIBS=`$PKGCFG --libs $GTK2_MODULE `


    AC_SUBST(gtk_CFLAGS)
    AC_SUBST(gtk_LIBS)

    if `$PKGCFG --exists $GTK2_MODULE >= $GTK2_VERSION `
    then	
	GTK_MODULES="$GTK2_MODULE"
	GTK_ERR=1
    fi


    GNOMEUI2_MODULE="libgnomeui-2.0"
    GNOMEUI2_VERSION="2.0.0"


    if `$PKGCFG --exists  $GNOMEUI2_MODULE >= $GNOMEUI2_VERSION`
    then	
	GTK_MODULES="$GTK_MODULES $GNOMEUI2_MODULE" 
	GTK_ERR=1
    fi

    libgnomeui_CFLAGS=`$PKGCFG --cflags $GNOMEUI2_MODULE `
    libgnomeui_LIBS=`$PKGCFG --libs $GNOMEUI2_MODULE `


    AC_SUBST(libgnomeui_CFLAGS)
    AC_SUBST(libgnomeui_LIBS)

    PIXMAP_DIR=pixmap


    if test x$buildgapplet = xtrue ; 
    then   
    
      if test x$GTKCONF = x ; 
      then
  	echo " **************************************** "
  	echo " * WARNING, missing program: gtk-config *"
  	echo " **************************************** "
  	echo ""
  	echo "     On Debian based distros, install sth like: libgtk2.0-dev"
  	echo ""
  	echo "However, I will try my best to continue without gtk-config. "
  	echo "Will not be able to check for gtk/gnome header files properly"
  	echo "On most platforms this implies no problem"
  	echo ""
      else	
        GTK_PREFIX=`$GTKCONF --prefix`
        GTK_INC_PATH=$GTK_PREFIX/include/$GNOMEUI2_MODULE/
        GNOME_H_FILE=$GTK_INC_PATH/gnome.h
  
        ls -l $GNOME_H_FILE 2>/dev/null >/dev/null

        MISSING_GNOME_H=$?

        if test x$MISSING_GNOME_H != x0  ; 
        then
  	  echo "Missing GNOME header file (gnome.h), you need to install development packages"
	  echo "On a Debian based distro system do:"
  	  echo ""
  	  echo "     sudo apt-get install libgnome2-dev"
  	  echo ""
echo  	  exit 1
        fi	
      fi
  
  fi
fi



if test x$buildgui = xtrue ; 
then
    dnl	GETTEXT_PACKAGE=gnee
    dnl	AC_SUBST(GETTEXT_PACKAGE)
    dnl	AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [The gettext package])

    dnl Add the languages which your application supports here.
    dnl	ALL_LINGUAS=""
    dnl	AM_GLIB_GNU_GETTEXT
    GUI_DIR=gnee

else
    GUI_DIR=
fi

if test x$buildgapplet = xtrue; 
then

    dnl	GETTEXT_PACKAGE=pnee
    dnl	AC_SUBST(GETTEXT_PACKAGE)
    dnl	AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [The gettext package])

    dnl Add the languages which your application supports here.
    dnl	ALL_LINGUAS=""
    dnl	AM_GLIB_GNU_GETTEXT
    GNOME_APPLET_DIR=pnee
else
    GNOME_APPLET_DIR=
fi

if test x$buildcli = xtrue 
then
    CLI_DIR=cnee
else
    CLI_DIR=
fi


LIB_DIR=libxnee
if test x$buildlib = xtrue ; 
then       
    WANTED_LIBXNEE=libxnee.la
    AC_SUBST(WANTED_LIBXNEE)
else
    if test x$makestatic = xfalse ;
    then
	echo "  ********** ERROR **********"
	echo " You can't build the programs dynamic "
	echo " and not install the libs $makestatic"
	echo "  ********** ERROR **********"
	exit 1
    fi
    WANTED_LIBXNEE=libxnee.la
    AC_SUBST(WANTED_LIBXNEE)
fi


check_xinput2()
{
    if test x$use_xi2 = xtrue ;
	then
	if test x$HAS_XI2 = xfalse ;
	    then
	    echo "XInput2 not found"
	    echo "To compile GNU Xnee you have to:"
	    echo "  *  Install XInput2 (development package)"
	    echo "or"
	    echo "  *  Disable XInput2 support in GNU Xnee:"
	    echo "         ./configure --disable-xinput2"
	    echo " "
	    exit 1
	fi
   fi
}

check_xinput2


dnl if test x$builddoc = xtrue ; 
dnl then
dnl 	DOC_DIR=doc
dnl else
dnl 	DOC_DIR=
dnl fi


FOO_DIR=foo
if test x$doconly = xtrue ; 
then
    buildgui=false
    buildlib=false
    buildcli=false
    builddoc=false
    LIB_DIR=
    CLI_DIR=
    GUI_DIR=
    FOO_DIR=bar
    DOC_DIR=doc
    DOC_MAKEFILES=
fi

DOC_DIR=doc


show_doc_program()
{
    PROG_VAR_TO_CHECK=$1
    PROG_TO_CHECK=$2
    MESS=$3
    if test "x$PROG_VAR_TO_CHECK" = "x" 
    then
	echo "       ***** $PROG_TO_CHECK missing, $MESS"
    else
	echo "       $PROG_TO_CHECK  - $PROG_VAR_TO_CHECK"
    fi
}

DOC_NOT_BUILT_WARNING=false
MISSING_PROGRAMS=""





DOC_TARGETS="info txt"
if test x$builddoc = xtrue ; 
then
    AC_PATH_PROG(DIA,dia,,)
    check_doc_program "$DIA" "dia" "dia"

    AC_PATH_PROG(TEXI2HTML,texi2html,,)
    check_doc_program "$TEXI2HTML" "texi2html" "texi2html"

#	AC_PATH_PROG(DVI2PS,dvi2ps,,)
#	check_doc_program "$DVI2PS" "dvi2ps" "dvi2ps"

    AC_PATH_PROG(DVIPDF,dvipdf,,)
    check_doc_program "$DVIPDF" "dvipdf" "dvipdf"

    AC_PATH_PROG(PDF2PS,pdf2ps,,)
    check_doc_program "$PDF2PS" "pdf2ps" ""

    AC_PATH_PROG(PS2PDF,ps2pdf,ps2pdf14,)
    check_doc_program "$PS2PDF" "ps2pdf" "gs-common"

    AC_PATH_PROG(TEXI2PDF,texi2pdf,,)
    check_doc_program "$TEXI2PDF" "texi2pdf" ""

    AC_PATH_PROG(EPSTOPDF,epstopdf,,)
    check_doc_program "$EPSTOPDF" "epstopdf" "texlive-extra-utils texlive-font-utils"

#	AC_PATH_PROG(DOXYGEN,doxygen,,)
#	check_doc_program "$DOXYGEN" "doxygen"  "doxygen"

    check_doc_program "$MAKEINFO" "makeinfo" " texinfo"


    if test x$DOC_NOT_BUILT_WARNING = xtrue ;
    then
	echo " "
	echo "  ********** ERROR **********"
	echo "  ** Documents can't be built ** "
	echo "  ** " 
	echo "  ** The following programs are missing:"
	for i in $MISSING_PROGRAMS 
	do
	    echo "  **    $i "
	done
	echo "  ** " 
	help_on_missing_progrs documentation "--disable-doc"
	echo "  ** " 
	echo "  ********** ERROR **********"
	DOC_DIR=""
	DOC_TARGETS=""
	builddoc=false
	doconly=false
	CNEE_INFO=""
	echo "...  configuration failed"
	exit 1
    else
	DOC_TARGETS="images html info txt pdf ps"
	CNEE_INFO="cnee.info"
    fi
else

    if test x$buildman = xtrue;
    then
	check_doc_program "$MAKEINFO" "makeinfo" "texi2html texinfo "

        if test x$DOC_NOT_BUILT_WARNING = xtrue ;
        then
	 echo " "
	 echo "  ********** ERROR **********"
	 echo "  ** Man page(s) and images can't be built ** "
	 echo "  ** " 
	 echo "  ** The following programs are missing:"
	 for i in $MISSING_PROGRAMS 
	 do
	    echo "  **    $i "
	 done
	 echo "  ** " 
	 help_on_missing_progrs documentation "--disable-doc"
         echo "  ** " 
	 echo "  ********** ERROR **********"
	 DOC_DIR=""
	 DOC_TARGETS=""
	 builddoc=false
	 doconly=false
	 CNEE_INFO=""
	 echo "...  configuration failed"
	 exit 1
        else
	 DOC_TARGETS="info"
	 CNEE_INFO="cnee.info"
        fi
    fi
fi


AC_SUBST(CONVERT)
AC_SUBST(DOC_TARGETS)
AC_SUBST(GUI_DIR)
AC_SUBST(GNOME_APPLET_DIR)
AC_SUBST(CLI_DIR)
AC_SUBST(LIB_DIR)
AC_SUBST(DOC_DIR)
AC_SUBST(PIXMAP_DIR)
AC_SUBST(FOO_DIR)
AC_SUBST(CNEE_INFO)
AC_SUBST(XNEE_DOC_DIR)

MAKEFILES_TO_GEN=""
MAKEFILES_TO_GEN="$MAKEFILES_TO_GEN Makefile examples/Makefile sessions/Makefile share/Makefile"

EXCLUDED_COMPONENTS=""
INCLUDED_COMPONENTS=""
add_excl()
{
    EXCLUDED_COMPONENTS="${EXCLUDED_COMPONENTS}\n        $1"
}

add_incl()
{
    INCLUDED_COMPONENTS="${INCLUDED_COMPONENTS}\n        $1"
}

if test x$doconly = xtrue || test x$builddoc = xtrue  ; 
then
    MAKEFILES_TO_GEN="$MAKEFILES_TO_GEN doc/Makefile"
    add_incl "doc"
else
    add_excl "doc (docs are already included in dist file)"
fi

if test x$buildlib = xtrue ; 
then
    dnl         MAKEFILES_TO_GEN="$MAKEFILES_TO_GEN libxnee/Makefile libxnee/test/Makefile libxnee/src/Makefile"
    MAKEFILES_TO_GEN="$MAKEFILES_TO_GEN libxnee/Makefile libxnee/src/Makefile "
    dnl	add_incl "libxnee"
    dnl else
    dnl	add_excl "libxnee"
    
fi

if test x$buildgui = xtrue || test x$buildgapplet = xtrue  ; 
then
    if test x$GTK_ERR != x0  ; 
    then
	echo "  ********** ERROR **********"
	echo "  ** pnee and/or gnee can't be built ** "
	echo "  ** " 
	echo "  ** The following program/package is missing:"
	echo "  **   $GTK_MODULES "
	echo "  ** " 
	DEBS_TO_INSTALL="$GTK_MODULES"
	help_on_missing_progrs "pnee and gnee" "--diable-gui --disable-gnome-applet" 
	echo "  ** " 
	echo "  ********** ERROR **********"
	exit 1
    fi
	
	
	
fi

if test x$buildcli = xtrue ; 
then
    MAKEFILES_TO_GEN="$MAKEFILES_TO_GEN cnee/Makefile cnee/src/Makefile"
    add_incl "cli"
else
    add_excl "cli"
fi

if test x$buildgui = xtrue ; 
then
    MAKEFILES_TO_GEN="$MAKEFILES_TO_GEN gnee/Makefile gnee/src/Makefile"
    add_incl "gnee"
else
    add_excl "gnee"
fi


if test x$buildgapplet = xtrue ; 
then
#	AM_GCONF_SOURCE_2
    PANEL_APPLET_DIR="${libdir}/gnome-panel"
    PANEL_SERVER_DIR="${libdir}/bonobo/servers"
    AC_SUBST(PANEL_SERVER_DIR)
    AC_SUBST(PANEL_APPLET_DIR)
#    AC_PATH_PROG(GCONFTOOL, gconftool-2)
    PANEL_APPLET=libpanelapplet-4.0
    PANEL_FLAGS=`$PKGCFG --cflags $PANEL_APPLET`
    PANEL_LD_FLAGS=`$PKGCFG  --libs $PANEL_APPLET`
    $PKGCFG $PANEL_APPLET
    if test x$? != x0 ;
    then
	echo "  ********** ERROR **********"
	echo "  ** pnee can't be built ** "
	echo "  ** " 
	echo "  ** The following programs/packages are missing:"
	echo "  **    $PANEL_APPLET"
	echo "  ** " 
	DEBS_TO_INSTALL=" libpanel-applet-4-dev"
	help_on_missing_progrs pnee "--disable-gnome-applet"
	echo "  ** " 
	echo "  ********** ERROR **********"
echo	exit 1
    fi
    AC_SUBST(PANEL_FLAGS)
    AC_SUBST(PANEL_LD_FLAGS)
#        AC_OUTPUT([ pnee/Makefile pnee/src/Makefile  pnee/pixmaps/Makefile ])
    MAKEFILES_TO_GEN="$MAKEFILES_TO_GEN pnee/Makefile pnee/data/Makefile pnee/src/Makefile pnee/pixmaps/Makefile"
    add_incl "pnee"
else
    add_excl "pnee"
fi



AC_SUBST(MAKEFILES_TO_GEN)
echo "Making the following Makefiles:"
echo "  $MAKEFILES_TO_GEN"
#AC_OUTPUT([ $MAKEFILES_TO_GEN ])
dnl libxnee/test/Makefile 
AC_OUTPUT([ Makefile libxnee/Makefile libxnee/src/Makefile examples/Makefile libxnee/test/Makefile sessions/Makefile share/Makefile doc/Makefile cnee/Makefile cnee/src/Makefile gnee/Makefile gnee/src/Makefile gnee/man/Makefile pnee/Makefile pnee/src/Makefile pnee/pics/Makefile  pnee/man/Makefile  pnee/data/Makefile  pixmap/Makefile man/Makefile  ])

#
# Final words 
#
#
#
echo " " 
echo " " 
echo " Configuration of Xnee finished "
echo " ============================== "
echo "    PACKAGE              $PACKAGE"
echo "    VERSION              $VERSION"
echo " "
echo "   Xnee Developer flags"
echo "   -------------------------------------"
echo "    VERBOSE_FLAG         $VERBOSE_FLAG"
echo "    GCOV_FLAG            $GCOV_FLAG"
echo "    GPROF_FLAG           $GPROF_FLAG"
echo "    BUF_VERBOSE_FLAG     $BUF_VERBOSE_FLAG"
echo "    PEDANTIC_FLAGS       $PEDANTIC_FLAGS"
echo "    XNEE_XINPUT_SUPPORT_FLAGS $XNEE_XINPUT_SUPPORT_FLAGS"
echo "    LIBDL                $LIBDL"
echo "    LIBSEMA              $LIBSEMA"
echo "    X11_LIBS             $X11_LIBS"
echo "    PANEL_SERVER_DIR     $PANEL_SERVER_DIR"
echo "    PANEL_APPLET_DIR     $PANEL_APPLET_DIR"
echo "    PIXMAP_DIR           $PIXMAP_DIR"
echo "    CONVERT              $CONVERT"
#echo "    GUI_DIR              $GUI_DIR"
#echo "    GNOME_APPLET_DIR     $GNOME_APPLET_DIR"
#echo "    CLI_DIR              $CLI_DIR"
#echo "    LIB_DIR              $LIB_DIR"
#echo "    DOC_DIR              $DOC_DIR"
echo " "
if test x$builddoc = xtrue ; 
then
    echo "   Programs used to build documentation and/or guis "
    echo "   -----------------------------------------------------"
    show_doc_program "$DIA" "dia"  "Can't generate pictures from dia sources"
    show_doc_program "$CONVERT" "convert"  "Can't convert image formats"
    show_doc_program "$TEXI2HTML" "texi2html"  "can't generate html pages"
#	show_doc_program "$DVI2PS" "dvi2ps"   "can't generate ps "
    show_doc_program "$DVIPDF" "dvipdf"   "can't generate pdf from dvi "
    show_doc_program "$PS2PDF" "ps2pdf"  "can't generate pdf"
    show_doc_program "$EPSTOPDF" "epstopdf"  "can't generate pdf"
    show_doc_program "$CONVERT" "convert"  "can't generate convert between formats"
    show_doc_program "$MAKEINFO" "makeinfo"  "can't make info pages"
fi

if test x$buildgapplet = xtrue || test x$buildgui = xtrue  ; 
then
    echo "   Programs used to build guis "
    echo "   -----------------------------------------------------"
    show_doc_program "$PKGCFG"   "pkg-config"  "can't get meta info from installed packages"
    show_doc_program "$GTKCONF"   "gtk-config"  "can't check for header files..."
fi
echo ""
echo "   Building the following components "
echo "   -------------------------------------"
printf "    $INCLUDED_COMPONENTS"
echo " "
echo " "
if test "x$EXCLUDED_COMPONENTS" != "x" ;
then
    echo "   Excluding the following components "
    echo "   -------------------------------------"
    printf "    $EXCLUDED_COMPONENTS"
    echo " "
fi
echo ""
echo "   Static or dynamic linking for programs ($makestatic)"
echo "   -------------------------------------"
echo "BUILD_STATIC:  $BUILD_STATIC"
if test "x$BUILD_STATIC" != "x" ;
then
    echo "        dynamic"
else
    echo "        static"
fi
echo ""
echo "   Support for XInput2"
echo "   -------------------------------------"
if test "x$XNEE_XINPUT_SUPPORT_FLAGS" = "x" ;
then
    echo "        disabled"
else
    echo "        enabled"
fi
echo " "
echo "   Settings ok?"
echo "   -------------------------------------"
echo "    If the settings are not ok, configure again"
echo "       ./configure <your options>"
echo " "
echo "    To list all the configure options: "
echo "       ./configure --help"
echo " "
echo "   Compile and install"
echo "   -------------------------------------"
echo "    If the above settings are ok, proceed with the build:"
echo "       make"
echo "    and (perhaps as root)"
echo "       make install"
echo " "

