export XNEE=../src/xnee
export VERBOSE_MODE=false

export LOG=./xnee_test.log
export ERR_LOG=./xnee_test.err




function init_test()
{
    SCRIPT_NAME=$1
    
    # Result counters
    TOTAL_TEST=0
    SUCC_TEST=0
    ERR_TEST=0
    WARN_TEST=0
    RETURN_TEST=0
    RETURN_ERR=0

    START=`date '+%s'`
    XNEE_VERSION=`$XNEE --version 2>&1 | grep xnee | grep -v opyrigh | grep -v WARRAN | grep -v http | awk '{ print $2}' | sed 's,[ ],,'`
    X_VEND=`xdpyinfo | grep "vendor string" | awk 'BEGIN {FS="[:]"} { print $2}' | sed 's,^[ ]*\(.*\)[ ]*$,\1,g'`
    X_VERS=`xdpyinfo | grep "vendor release" | awk 'BEGIN {FS="[:]"} { print $2}' | sed 's,^[ ]*\(.*\)[ ]*$,\1,g'`
    ME=`whoami`
    OS="`uname -o`:`uname -s`:`uname -r`:`uname -n`"

}


function log()
{
    echo "$*" >> $LOG
    echo "$*"
}

function error_log()
{
    echo "$*" >> $ERR_LOG
}


function move_cursor()
{
    DELAY=$1
    $XNEE --replay -f rc/one_cursor.xnr --time $DELAY
}


function result_log_xml()
{
    NAME=$1
    log "<RESULT script-name=\"$NAME\">"
    log "  <TOTAL>"
    log "    $TOTAL_TEST"
    log "  </TOTAL>"
    log "  <SUCCES>"
    log "    $SUCC_TEST"
    log "  </SUCCES>"
    log "  <ERROR>"
    log "    $ERR_TEST"
    log "  </ERROR>"
    log "  <WARN>"
    log "    $WARN_TEST"
    log "  </WARN>"
    log "  <RETURN-SUCCESS>"
    log "    $RETURN_TEST"
    log "  </RETURN-SUCCESS>"
    log "  <RETURN-ERROR>"
    log "    $RETURN_ERR"
    log "  </RETURN-ERROR>"
    log "</RESULT>"
}

function result_log_simple()
{
    NAME=$1
    log "Script name=\"$NAME\""
    log "============================="
    log " "
    log "  Functionality test"
    log "  ------------------"
    log "    Test total:   $TOTAL_TEST"
    log "    Success:      $SUCC_TEST"
    log "    Error:        $ERR_TEST"
    log "    Warnings:     $WARN_TEST"
    log " "
    log "  Return value test"
    log "  ------------------"
    log "    Correct:      $RETURN_TEST"
    log "    Wrong         $RETURN_ERR"
}


function result_log_()
{
    NAME=$1
    log "$NAME:$TOTAL_TEST:$SUCC_TEST:$ERR_TEST:$WARN_TEST:$RETURN_TEST:$RETURN_ERR:$START:$STOP:$XNEE_VERSION:$X_VEND:$X_VERS:$ME:$OS"
}


function result_log()
{
    STOP=`date '+%s'`
    result_log_ $*
}


function verbose()
{
    if [ "$VERBOSE_MODE" == "true" ];
        then
        echo "  $MYNAME: $*"  1>&2
    fi
}

function check_retval()
{
    RESULT=$1
    EXPECTED=$2 
    MSG="$SCRIPT_NAME checking return value $RESULT == $EXPECTED   "
    
    RESULT_TEST=`expr $RESULT_TEST + 1`
    verbose "Checking return val for:$MSG"
    if [ "$RESULT" != "$EXPECTED" ] ;
	then 
	verbose "   Unexpected return val: $MSG"
	error_log "   Unexpected return val: $MSG"
	RETURN_ERR=`expr $RETURN_ERR + 1`
    else
	verbose "  return val OK"
	RETURN_TEST=`expr $RETURN_TEST + 1`
    fi
}

function check_retval_false()
{
    RESULT=$1
    UN_EXPECTED=$2 
    MSG="$SCRIPT_NAME checking return value (false)  $RESULT == $EXPECTED   "
    RESULT_TEST=`expr $RESULT_TEST + 1`
    
    if [ "$RESULT" == "$UN_EXPECTED" ] ;
	then
	verbose "   Unexpected return val: $MSG"
	error_log  "   Unexpected return val: $MSG"
	RETURN_ERR=`expr $RETURN_ERR + 1`
    else
	verbose "  return val OK"
	RETURN_TEST=`expr $RETURN_TEST + 1`
    fi
}


function parse_me()
{
    for arg in "$1"
      do
      verbose "Parsing : \"$arg\" "
      case "$arg" in 
	  "--verbose")
          VERBOSE_MODE=true
          ;;

          *)
          verbose "faulty argument: $arg"
          ;;
      esac
      shift
    done
}


function find_events()
{
    FILE=$1 
    OUT=$2
    rm -f $OUT
    cat $FILE | \
	awk 'BEGIN { found=0; } \
	/#define KeyPress[ \t]+/ { found=1;} \
	{ if (found)             { printf "%.2d=%s\n", $3, $2 }   } \
	/#define LASTEvent/      { found=0;} \
	    '  > $OUT
}

function find_requests()
{
    FILE=$1 
    OUT=$2
    rm -f $OUT
    cat $FILE | \
	awk 'BEGIN { found=0; } \
	/#define X_CreateWindow[ \t]+/ { found=1;} \
	{ if (found)             { printf "%.2d=%s\n", $3, $2 }   } \
	/#define X_NoOperation/      { found=0;} \
	    '  > $OUT
}




#
#
#  compare_data
#
#
#  Compare if the the name,number pair given
#  as argument is the same as given by Xnee --print-xxxx-name
#  
# 

function compare_data()
{
    
    EXP_EV=`echo $1 | sed 's,^[0]*,,g'`
    EXP_EV_NAME=$2

    REC_EV=$3
    REC_EV_NAME=$4

    MSG="$SCRIPT_NAME comparing: \"$EXP_EV == $EXP_EV_NAME\"   and \"$REC_EV == $REC_EV_NAME\""

    TOTAL_TEST=`expr $TOTAL_TEST + 1`

    verbose "Comparing:"
    verbose "  expected:  \"$EXP_EV == $EXP_EV_NAME\""
    verbose "  xnee:      \"$REC_EV == $REC_EV_NAME\""

    if [ "$REC_EV" != "$EXP_EV" ];
	then
	error_log " Data differs: $MSG"
	ERR_TEST=`expr $ERR_TEST + 1`
	return 1
    fi

    if [ "$REC_EV_NAME" != "$EXP_EV_NAME" ];
	then
	error_log " Data differs: $MSG"
	ERR_TEST=`expr $ERR_TEST + 1`
	return 1
    fi

    verbose "success...."
    SUCC_TEST=`expr $SUCC_TEST + 1`
}


function compare_data_false()
{
    
    EXP_EV=`echo $1 | sed 's,^[0]*,,g'`
    EXP_EV_NAME=$2

    REC_EV=$3
    REC_EV_NAME=$4

    MSG="$SCRIPT_NAME comparing (false): \"$EXP_EV == $EXP_EV_NAME\"   and \"$REC_EV == $REC_EV_NAME\""


    TOTAL_TEST=`expr $TOTAL_TEST + 1`

    verbose "Comparing (false):"
    verbose "  inv xnee:      \"$REC_EV/$REC_EV_NAME\""
    verbose "  inv expected:  \"$EXP_EV/$EXP_EV_NAME\""

    if [ "$REC_EV" == "$EXP_EV" ];
	then
	error_log " Data doesn't differ: $MSG"
	ERR_TEST=`expr $ERR_TEST + 1`
	return 1
    fi
    if [ "$REC_EV_NAME" == "$EXP_EV_NAME" ];
	then
	error_log " Data doesn't differ: $MSG"
	ERR_TEST=`expr $ERR_TEST + 1`
	return 1
    fi
    
    verbose "success...."
    SUCC_TEST=`expr $SUCC_TEST + 1`
}



function verify_device()
{
    DEV=$1
    cat /proc/misc | grep $DEV   2>/dev/null 1>/dev/null 
    if [ "$?" != "0" ];
	then
	echo "Could not find device $DEV"
	echo "...leaving"
	exit 1
    fi
}


function zero_device()
{
	DEV=$1
	echo "0" > /dev/$DEV
}


function verify_same()
{
    EXP_VAL=$1
    REAL_VAL=$2

    MSG="$SCRIPT_NAME comparing : \"$EXP_VAL == $REAL_VAL\" $3"

    TOTAL_TEST=`expr $TOTAL_TEST + 1`

    verbose "Comparing :"
    verbose "  expected:  \"$EXP_VAL\""
    verbose "  real    :  \"$REAL_VAL\""

    if [ "$EXP_VAL" != "$REAL_VAL" ];
	then
	verbose " Data differs: $MSG"
	error_log " Data differs: $MSG"
	ERR_TEST=`expr $ERR_TEST + 1`
	return 1
    fi

    verbose "success...."
    SUCC_TEST=`expr $SUCC_TEST + 1`
    

}


function verify_not_same()
{
    EXP_VAL=$1
    REAL_VAL=$2

    MSG="$SCRIPT_NAME un comparing : \"$EXP_VAL != $REAL_VAL\" $3"

    TOTAL_TEST=`expr $TOTAL_TEST + 1`

    verbose "Uncomparing :"
    verbose "  expected:  \"$EXP_VAL\""
    verbose "  real    :  \"$REAL_VAL\""

    if [ "$EXP_VAL" == "$REAL_VAL" ];
	then
	verbose " Data is same: $MSG"
	error_log " Data is same : $MSG"
	ERR_TEST=`expr $ERR_TEST + 1`
	return 1
    fi

    verbose "success...."
    SUCC_TEST=`expr $SUCC_TEST + 1`
}

function verify_pos_alm_same()
{
    EXP_VAL=$1
    REAL_VAL=$2
    LIMIT=$3

    MSG="$SCRIPT_NAME  verify_pos_alm_same : \"$EXP_VAL == $REAL_VAL\" and within range of $3"

    TOTAL_TEST=`expr $TOTAL_TEST + 1`

    verbose "verify_pos_alm_same:"
    verbose "  expected:  \"$EXP_VAL\""
    verbose "  real    :  \"$REAL_VAL\""

    LOW_VAL=$(( $EXP_VAL - $LIMIT ))
    HIGH_VAL=$(( $EXP_VAL + $LIMIT ))

    if [ "$REAL_VAL" -gt "$HIGH_VAL" ];
	then
	verbose " Data too big: $MSG"
	error_log " Data too big: $MSG"
	ERR_TEST=`expr $ERR_TEST + 1`
	return 1
    elif [ "$REAL_VAL" -lt "$LOW_VAL" ];
	then
	verbose " Data too small: $MSG"
	error_log " Data too small: $MSG"
	ERR_TEST=`expr $ERR_TEST + 1`
	return 1
    fi

    verbose "success...."
    SUCC_TEST=`expr $SUCC_TEST + 1`
}


function check_xgetter()
{
    if [ ! -f ./src/xgetter ]
	then
	pushd ./src/
	make all
	popd
    fi
}

export getresx="./src/xgetter  --resolution-x"
export getresy="./src/xgetter  --resolution-y"
export getx="./src/xgetter  --mouse-position-root-x"
export gety="./src/xgetter  --mouse-position-root-y"
export getxy="./src/xgetter  --mouse-position-root-all"

get_pointer()
{
    check_xgetter    
    XPOS=`$getx`
    YPOS=`$gety`
}

save_pointer()
{
    check_xgetter    
    SAVE_XPOS=`$getx`
    SAVE_YPOS=`$gety`
}

