@node Synchronisation, Requirements, Examples, top
@chapter synchronisation
@cindex synchronisation

@section Why synchronise
@cindex why synchronise

To understand why synchronisation during replay is needed an example is given. 

In this example only mouse and keyboard events are recorded. Think of a session with a web browser. 

During record the following is done:
@itemize @bullet
@item	Start galeon (or another web browser) via the GNOME panel
@item	Press Ctrl-O which pops up a window
@item   Press the left button in the textfield of the popup window
@item   Enter the URL you want to enter (e.g http://www.gnu.org)
@item   Click on the OK button 
@item   Then click on another URL (e.g GNU Documentation)
@item   Then click on another URL (e.g On-Line Documentation)
@end itemize

When replaying this session it is often to synchronise the recorded session with what's happening "right now" on the display since sometimes (or rather always) there can be different response times from the same URL. 

During replay the following is done:
@itemize @bullet
@item   Galeon is started
@item   Ctrl-O is typed which pops up a window
@item   Press the left button in the textfield of the popup window
@item   Enter the URL you want to enter (e.g http://www.gnu.org)
@item   Clock on the OK button 
@item      ... due to an enormous amount of visitors the GNU web server can't respond as quick as it did when recording. So when the next thing happens
@item   Then click on another URL (e.g GNU Documentation)
@item      ... the page hasn't been loaded and when the next event is replayed
@item   Then click on another URL (e.g On-Line Documentation)
@item      ... the link isn't there and we're really out of sync with the recorded session
@end itemize


@section How to synchronise
@cindex how to synchronise
Instead we could record some more data than just the mouse and keyboard events. 

During record the following is done:
@itemize @bullet
@item	Start galeon (or another web browser) via the GNOME panel
@item   Record some X data that tells us that a window have been created
@item	Press Ctrl-O which pops up a window
@item   Record some X data that tells us that a window have been created
@item   Press the left button in the textfield of the popup window
@item   Enter the URL you want to enter (e.g http://www.gnu.org)
@item   Clock on the OK button 
@item   Record some X data that tells us that a window have been destroyed
@item   Then click on another URL (e.g GNU Documentation)
@item   Record some X data that tells us that a some text has been displayed in a window
@item   Then click on another URL (e.g On-Line Documentation)
@item   Record some X data that tells us that a some text has been displayed in a window
@end itemize
The non-mouse-or-keyboard events recorded (window created & text displayed) are record for synchronisation purposes.

During replay the following is done:
@itemize @bullet
@item	Start galeon (or another web browser) via the GNOME panel
@item   wait for: the recorded X data to be sent again
@item	Press Ctrl-O which pops up a window
@item   wait for: the recorded X data to be sent again
@item   Press the left button in the textfield of the popup window
@item   Enter the URL you want to enter (e.g http://www.gnu.org)
@item   Clock on the OK button 
@item   wait for: the recorded X data to be sent again
@item   Then click on another URL (e.g GNU Documentation)
@item   wait for: the recorded X data to be sent again
@item   Then click on another URL (e.g On-Line Documentation)
@item   wait for: the recorded X data to be sent again
@end itemize



@section Synchronisation is needed
So by recording more data than just the events to be replayed we can synchornise what was recorded with what is going on when replaying. But the data has to be choosen carefully since synchronisation data:
@itemize @bullet
@item    differs from different sessions (Gimp and Xterm are really different)
@item    slows down the replay session if there are too many
@item    is hard to choose since the X protocol is rich
@item    differs (comparing record and replaying)
@item    can have different ordering (comparing record and replaying)
@end itemize

@subsection Different data for different kind of sessions
If we record an xterm session with all data being recorded and compare that to a recorded GIMP session with all data being recorded we can see that the data to use as synchronisation data differs. As an example there aren't so many windows created/destroyed during an xterm session as in a GIMP session.

The solve to the the problem of finding out what data to use as synchronisation data one can:
@itemize @bullet
@item   use the resource files delivered with Xnee
@item   analyse the application (using Xnee's  @code{--human-printouts} option) and do some "trial and error"
@end itemize


@subsection Slow replay session due to too many synchronise data 
There are timeouts that can can make Xnee pause for a short while during synchronisation. If there are many such timeouts it will lead to a slow replaying session. To prevent this the data to use during synchronisation has to be choosen carefully.

@subsection X protocol is rich
For an end user (with no X expertise) it is hard to read the X protocol specification and make assumptions on what data to use.

@subsection Different data sent 
Even if one starts up a machine from scratch (reboot) when recording and from scratch when replaying there is no guarantee that the data is sent in the same order or that exactly the same amount of data is sent.


@section Buffers and timeouts
To enable synchronisation Xnee buffers data:
@itemize @bullet
@item    that was recorded but hasn't been sent during replay
@item    that was sent during replay but hasn't been seen in the recorded file 
@end itemize

For every data during replay that hasn't been sent (as when recorded) Xnee pauses for a short while. If the data is sent to Xnee, everything is fine. If the data isn't sent it is stored in the buffer of unsynchronised data. If the number of unsynchronised data is getting to high, Xnee will eventually exit with an error code (see man page(s)).


