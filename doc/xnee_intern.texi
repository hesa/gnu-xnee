@node Internals, Requirements, Protocol, top

@chapter Xnee Internals
@cindex  Xnee Internals
This chapter is intended to explain the internal design of libxnee. 
Hopefully this will lead to a better understanding of how to use Xnee
and why some features exists and why some doesn't. 


@section Project file
@cindex  Project file
Xnee can be set either using command line options (when using xnee) or by
clicking the correct buttons etc in the GUI (using gnee). Instead of setting 
the same settings over and over again, you can use the Xnee Project File. 


@subsection  Create a project file
@cindex      Create a project file
You can create a project by yourself. This can be done using 
the @code{write-settings} option in xnee or the ``save settings to file'' 
when using gnee or you can use the Xnee GUI (gnee) to write one.
You can also
write one by yourself in your favorite editor. Just make sure you follow the XNee protocol. For information and specification on this protocol read the Xnee Protocol chapter.




@section Xnee Session file
@cindex  Session file
The Xnee session files are the printouts from a recorded session following the Xnee protocol. For information and specification on this protocol read the Xnee Protocol chapter.




@section Key and modifier
@cindex  Key and modifier
When wanting to interupt Xnee from its current action it may sometimes be hard to 
send a signal. Because of this Xnee has been added support to grab key and modifiers
that can be bound to various xnee actions. You can specify a key + modifier 
combination and bind that to either one of the following actions:
@table @samp
@item  stop
@item  pause
@item  resume
@item  insert mark
@end table

@subsection  Stop Xnee with key+modifier combination
@cindex      Stop Xnee with key+modifier combination
Xnee stops its current action when the user presses the key+modifier
combination as specified during setup. Xnee will be shut gracefully.

@subsection  Pause Xnee with key+modifier combination
@cindex      Pause Xnee with key+modifier combination
Xnee pause its current action when the user presses the key+modifier
combination as specified during setup. Xnee will be in paused mode until
the user stops or resumes Xnee.

@subsection  Pause Xnee with key+modifier combination
@cindex      Pause Xnee with key+modifier combination
Xnee resumes its current paused action when the user presses the key+modifier
combination as specified during setup. Xnee will continue where it was
paused.

@subsection  Insert marks Xnee with key+modifier combination
@cindex      Insert marks Xnee with key+modifier combination
When the user presses the key+modifier combination as specified during setup Xnee will 
print a mark in the session file containing a time stamp. This feature is intended be used
when you want to mark an interresting time/event during recording. 
After recording has finished you can add Xnee scripting calls to Xnee which will be 
interpreted and executed as if they were recorded.


@subsection  Stop key and modifier syntax
@cindex      Stop key and modifier syntax
Setting stop key and modifier is done using the @code{--stop-key} option.
@example
@code{xnee --record --mouse --stop-key Control,e}
@end example
This will make Xnee stop its current action when the user presses Control and e.

@subsection  Pause key and modifier syntax
@cindex      Pause key and modifier syntax
Setting pause key and modifier is done using the @code{--pause-key} option.
@example
@code{xnee --record --mouse --pause-key Control,p}
@end example
This will make Xnee pause its current action when the user presses Control and p.

@subsection  Resume key and modifier syntax
@cindex      Resume key and modifier syntax
Setting stop resume and modifier is done using the @code{--resume-key} option.
@example
@code{xnee --record --mouse --resume-key Control,r}
@end example
This will make Xnee resume its paused action when the user presses Control and r.


@subsection  Insert key and modifier syntax
@cindex      Insert key and modifier syntax
Setting insert key and modifier is done using the @code{--insert-key} option.
@example
@code{xnee --record --mouse --insert-key Control,i}
@end example
This will make Xnee insert a mark in the session file when the user presses Control and i.



@subsection  Key syntax
@cindex      Key syntax
You can set the key by entering one character or the keycode for the 
character you wish to use. 

@subsection  Modifier syntax
@cindex      Modifier syntax

Modifiers can be set to a '+' separated list of any of the following.
@table @samp
@item  Shift or Shift
        Modifier is set to the Shift key
@item  LockMask or Lock
        Modifier is set to the Lock key
@item  Control or ctrl
        Modifier is set to the Control key
@item  Mod1Mask or m1m
        Modifier is set to 
@item  Mod2Mask or m2m
        Modifier is set to 
@item  Mod3Mask or m3m
        Modifier is set to 
@item  Mod4Mask or m4m
        Modifier is set to 
@item  Mod5Mask or m5m
        Modifier is set to 
@item  Alt_L
        Modifier is set to Alt_L
@item  Alt_L
        Modifier is set to Alt_R
@item  Alt 
        Modifier is set to be any of Alt_L and Alt_R
@item  Shift_R
        Modifier is set to Shift_R
@item  Shift_L
        Modifier is set to Shift_L
@item  Shift
        Modifier is set to be any of Shift_L and Shift_R
@item  Control_R
        Modifier is set to Control_R
@item  Control_L
        Modifier is set to Control_L
@item  Control
        Modifier is set to be any of Control_L and Control_R
@item  Scroll
        Modifier is set Scroll
@item  Caps_Lock
        Modifier is set Caps Lock
@item  AnyModifier or any
        Modifier is set to any of the modifier
@item  none or 0
        No modifier is used
@end table

You can also specify the keycode for the modifier you wish to use

@section Modifier+key examples
@cindex  Modifier+key  examples

If you want to set the modifier to be a combination of Control, Alt and Shift you
spearate them with a @code{+} sign.
@example
@code{Control+Alt+Shift}
@end example

If you want to make Xnee stop when pressing the above modifier combination and the key
y, you type 
@example
@code{--stop-key Control+Alt+Shift,y} 
@end example



@section Synchronisation
@cindex Synchronisation
We will try to go through the basics of how Xnee implememnts synchronisation and 
try to tell you, by using examples, why synhronisation is important.

@subsection Why synchronise
@cindex why synchronise

To understand why synchronisation during replay is needed an example is given. 

In this example only mouse and keyboard events are recorded. Think of a session with a web browser. 

During record the following is done:
@itemize @bullet
@item	Start galeon (or another web browser) via the GNOME panel
@item	Press Ctrl-O which pops up a window
@item   Press the left button in the textfield of the popup window
@item   Enter the URL you want to enter (e.g @url{http://www.gnu.org})
@item   Click on the OK button 
@item   Then click on another URL (e.g GNU Documentation)
@item   Then click on another URL (e.g On-Line Documentation)
@end itemize

When replaying this session it is often to synchronise the recorded session with what's happening "right now" on the display since sometimes (or rather always) there can be different response times from the same URL. 

During replay the following is done:
@itemize @bullet
@item   Galeon is started
@item   Ctrl-O is typed which pops up a window
@item   Press the left button in the textfield of the popup window
@item   Enter the URL you want to enter (e.g @url{http://www.gnu.org})
@item   Clock on the OK button 
@item      ... due to an enormous amount of visitors the GNU web server can't respond as quick as it did when recording. So when the next thing happens
@item   Then click on another URL (e.g GNU Documentation)
@item      ... the page hasn't been loaded and when the next event is replayed
@item   Then click on another URL (e.g On-Line Documentation)
@item      ... the link isn't there and we're really out of sync with the recorded session
@end itemize


@subsection How to synchronise
@cindex how to synchronise
Instead we could record some more data than just the mouse and keyboard events. 

During record the following is done:
@itemize @bullet
@item	Start galeon (or another web browser) via the GNOME panel
@item   Record some X data that tells us that a window have been created
@item	Press Ctrl-O which pops up a window
@item   Record some X data that tells us that a window have been created
@item   Press the left button in the textfield of the popup window
@item   Enter the URL you want to enter (e.g @url{http://www.gnu.org})
@item   Clock on the OK button 
@item   Record some X data that tells us that a window have been destroyed
@item   Then click on another URL (e.g GNU Documentation)
@item   Record some X data that tells us that a some text has been displayed in a window
@item   Then click on another URL (e.g On-Line Documentation)
@item   Record some X data that tells us that a some text has been displayed in a window
@end itemize
The non-mouse-or-keyboard events recorded (window created & text displayed) are record for synchronisation purposes.

During replay the following is done:
@itemize @bullet
@item	Start galeon (or another web browser) via the GNOME panel
@item   wait for: the recorded X data to be sent again
@item	Press Ctrl-O which pops up a window
@item   wait for: the recorded X data to be sent again
@item   Press the left button in the textfield of the popup window
@item   Enter the URL you want to enter (e.g @url{http://www.gnu.org})
@item   Clock on the OK button 
@item   wait for: the recorded X data to be sent again
@item   Then click on another URL (e.g GNU Documentation)
@item   wait for: the recorded X data to be sent again
@item   Then click on another URL (e.g On-Line Documentation)
@item   wait for: the recorded X data to be sent again
@end itemize



@subsection Synchronisation is needed
So by recording more data than just the events to be replayed we can synchornise what was recorded with what is going on when replaying. But the data has to be choosen with respect to that the data:
@itemize @bullet
@item    differs from different sessions (Gimp and Xterm are really different)
@item    slows down the replay session if there are too many
@item    is hard to choose since the X protocol is rich
@item    differs (comparing record and replaying)
@item    can have different ordering (comparing record and replaying)
@end itemize

@subsection Different data for different kind of sessions
If we record an xterm session with all data being recorded and compare that to a recorded GIMP session with all data being recordr we can see that the data to use as synchronisation data differs. AS an example there aren't so many windows created/destryed during an xterm session.

The solve to the the problem of finding out what data to use as synchronisation data one can:
@itemize @bullet
@item   use the project files delivered with Xnee
@item   analyse the application (using Xnee's  @code{--human-printouts} option) and do some "trial and error"
@end itemize


@subsection Slow replay session due to too many synchronise data 
The synchronisation itself doesn't take much time but there are timeouts that makes Xnee paues for a short while (see above). If there are many such timeouts it will lead to a slow or shaky replaying session.

@subsection X protocol is rich and asynchronous
For an end user (with no X expertise) it is hard to read the X protocol specification and make assumptions on what data to use.

@subsection Different data sent 
Even if one starts up a machine from scratch (reboot) when recording and from scratch when replaying there is no guarantee that the data is sent in the same order or that exactly the same amount of data is sent.


@subsection Buffers and timeouts
To enable synchronisation Xnee buffers data:
@itemize @bullet
@item    that was read in the session file but hasn't been sent during replay
@item    that was sent during replay but hasn't been seen in the session
         file being replayed
@end itemize
For every data read from session file (during replay) that isn't replayable 
(i e device event) Xnee stores the data in a buffer. Xnee also stores the
data sent from the X server during playback. The data received from the server
make the buffer entry for that specific data be decremented. If, on the other 
hand, the same data was read from file the buffer entry for that data is 
incremented.
Before replaying any replayable event Xnee makes sure it is in sync. If Xnee 
is in sync the replaying 
continues. If Xnee is out of sync it will look for its thresholds and see
if it is inside a user specified range. There are three thresholds:
@itemize @bullet
@item    @b{positive maximum}  nr data read from session file
@item    @b{negative minimum}  nr of data sent from X server
@item    @b{absolute total maximum} sum of the absolute values above
@end itemize
If Xnee read one data from file (e.g the event MapNotify) Xnee checks if the 
buffer entry for the specific data is bigger than the positive maximum value
(after having incremented the buffer value). 

If Xnee receives one data from the X server (e.g the event MapNotify) it 
checks if the  buffer entry for the specific data is bigger than the 
negative minimum value (after having decremented the buffer value). 

Xnee also checks if the absolute sum of the diferences for every entry
in the buffer is higher the a total threshold.

If Xnee is getting out of sync it slows down the speed a bit and tries to 
continue. However after a while it may happen that Xnee considers that it
no use to continue since we are too much out of sync.
@*
Xnee compensates for the delay during replay that is caused when being out of 
sync.
@*
It is possible to tweak the thresholds using the @code{--maximum-threshold},
@code{--negative-threshold} and @code{--total-diff-threshold} options. Is is
also possible to turn off synchronisation completely using the @code{--no-sync}
option.
